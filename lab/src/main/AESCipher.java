package main;

import java.security.Key;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Queue;
import java.util.Arrays;
import java.util.stream.IntStream;

public class AESCipher {

    private static int[] sBox = new int[] {
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    };

    private static final int[] rCon = {
            0x8D,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36,0x6C,0xD8,0xAB,0x4D,0x9A,
            0x2F,0x5E,0xBC,0x63,0xC6,0x97,0x35,0x6A,0xD4,0xB3,0x7D,0xFA,0xEF,0xC5,0x91,0x39,
            0x72,0xE4,0xD3,0xBD,0x61,0xC2,0x9F,0x25,0x4A,0x94,0x33,0x66,0xCC,0x83,0x1D,0x3A,
            0x74,0xE8,0xCB,0x8D,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36,0x6C,0xD8,
            0xAB,0x4D,0x9A,0x2F,0x5E,0xBC,0x63,0xC6,0x97,0x35,0x6A,0xD4,0xB3,0x7D,0xFA,0xEF,
            0xC5,0x91,0x39,0x72,0xE4,0xD3,0xBD,0x61,0xC2,0x9F,0x25,0x4A,0x94,0x33,0x66,0xCC,
            0x83,0x1D,0x3A,0x74,0xE8,0xCB,0x8D,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,
            0x36,0x6C,0xD8,0xAB,0x4D,0x9A,0x2F,0x5E,0xBC,0x63,0xC6,0x97,0x35,0x6A,0xD4,0xB3,
            0x7D,0xFA,0xEF,0xC5,0x91,0x39,0x72,0xE4,0xD3,0xBD,0x61,0xC2,0x9F,0x25,0x4A,0x94,
            0x33,0x66,0xCC,0x83,0x1D,0x3A,0x74,0xE8,0xCB,0x8D,0x01,0x02,0x04,0x08,0x10,0x20,
            0x40,0x80,0x1B,0x36,0x6C,0xD8,0xAB,0x4D,0x9A,0x2F,0x5E,0xBC,0x63,0xC6,0x97,0x35,
            0x6A,0xD4,0xB3,0x7D,0xFA,0xEF,0xC5,0x91,0x39,0x72,0xE4,0xD3,0xBD,0x61,0xC2,0x9F,
            0x25,0x4A,0x94,0x33,0x66,0xCC,0x83,0x1D,0x3A,0x74,0xE8,0xCB,0x8D,0x01,0x02,0x04,
            0x08,0x10,0x20,0x40,0x80,0x1B,0x36,0x6C,0xD8,0xAB,0x4D,0x9A,0x2F,0x5E,0xBC,0x63,
            0xC6,0x97,0x35,0x6A,0xD4,0xB3,0x7D,0xFA,0xEF,0xC5,0x91,0x39,0x72,0xE4,0xD3,0xBD,
            0x61,0xC2,0x9F,0x25,0x4A,0x94,0x33,0x66,0xCC,0x83,0x1D,0x3A,0x74,0xE8,0xCB,0x8D};



    public static String[][] aesRoundKeys(String KeyHex){
        String[] output = new String[11];

        Queue<String> queue = new LinkedList<>();
        for(int index = 0; index < KeyHex.length(); index+=2){
            queue.add(KeyHex.substring(index,index+2));
        }
        String[][] Ke = new String[4][4];
        for(int i = 0; i < Ke.length; i++){
            for(int j = 0; j < Ke[0].length; j++){
                Ke[j][i] = queue.remove();
            }
        }
        String[][] W = new String[4][44];
        for(int i = 0; i < Ke.length; i++){
            for(int j = 0; j < Ke[0].length; j++){
                W[j][i] = Ke[j][i];
            }
        }
        for(int col = 4; col < W[0].length; col++){
            String[] tempW = {W[0][col-1], W[1][col-1], W[2][col-1], W[3][col-1]};
            for(String[] x: W){
                for(String i: x){
                    System.out.print(i + " ");
                }
                System.out.println();
            }
            System.out.println();
            if(col % 4 == 0){
                tempW = shiftUp(tempW);
                for(int x = 0; x < tempW.length; x++){
                    tempW[x] = Integer.toHexString(aesSBox(tempW[x]));
                }
                tempW[0] = XOR(aesRcon(getRound(col)),tempW[0]).toUpperCase();
                for(int x = 0; x < tempW.length; x++){
                    tempW[x] = XOR(W[x][col-4],tempW[x]);
                    W[x][col] = tempW[x].length() == 2 ? tempW[x].toUpperCase() : "0" + tempW[x].toUpperCase();
                }
            }
            else{
                for(int x = 0; x < tempW.length; x++){
                    tempW[x] = XOR(W[x][col-4],tempW[x]);
                    W[x][col] = tempW[x].length() == 2 ? tempW[x].toUpperCase() : "0" + tempW[x].toUpperCase();
                }
            }
        }
        return W;
    }

    public static String[] shiftUp(String[] str){
        String[] shifted = {str[1],str[2],str[3],str[0]};
        return shifted;
    }

    public static int aesSBox(String inHex){
        return sBox[Integer.parseInt(inHex,16)];
    }

    public static String aesRcon(int round){
        return Integer.toHexString(rCon[round]);
    }

    public static int getRound(int column){
        return (int) Math.floor(column/4);
    }

    public static String XOR(String first, String second){
        return Integer.toHexString(Integer.parseInt(first,16) ^ Integer.parseInt(second,16));
    }

    public static void main(String[] arg){
        String[][] r = aesRoundKeys("5468617473206D79204B756E67204675");
        String ans = "5468617473206D79204B756E67204675E232FCF191129188B159E4E6D679A29356082007C71AB18F76435569A03AF7FAD2600DE7157ABC686339E901C3031EFBA11202C9B468BEA1D75157A01452495BB1293B3305418592D210D232C6429B69BD3DC287B87C47156A6C9527AC2E0E4ECC96ED1674EAAA031E863F24B2A8316A8E51EF21FABB4522E43D7A0656954B6CBFE2BF904559FAB2A16480B4F7F1CBD828FDDEF86DA4244ACCC0A4FE3B316F26";
        String sol = "";
        for(int l = 0;l < r[0].length; l++){
            for(int i = 0; i < r.length; i++){
                sol += r[i][l];
            }
        }

//        System.out.println(Integer.toHexString(sBox[0x20]));
//        System.out.println(Integer.toHexString(rCon[01]));
//        System.out.println(Integer.toHexString(0x01 ^ 0xB7));
//        System.out.println(Integer.toHexString(0x54^0xB6));
//        System.out.println(ans.contentEquals(sol));
//        System.out.println(ans);
//        System.out.println(sol);
    }
}
